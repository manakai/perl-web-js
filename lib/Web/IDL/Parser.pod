=head1 NAME

Web::IDL::Parser - A Web IDL parser

=head1 SYNOPSIS

  use Web::IDL::Parser;
  $parser = Web::IDL::Parser->new;
  $parser->parse_char_string ($idl_fragment);
  warn Dumper $parser->parsed_struct;

=head1 DESCRIPTION

The C<Web::IDL::Parser> module provides a Web IDL parser.

=head1 METHODS

Following methods are available:

=over 4

=item $parser = Web::IDL::Parser->new

Create a new Web IDL parser object.

=item $parser->onerror ($code)

=item $code = $parser->onerror

Get or set the error handler for the parser.  Any parse error, as well
as warning and additional processing information, is reported to the
handler.  See
<https://github.com/manakai/data-errors/blob/master/doc/onerror.txt>
for details of error handling.

The value should not be set while the parser is running.  If the value
is changed, the result is undefined.

=item $parser->parse_char_string ($input)

Parse a string of character as a Web IDL fragment.  The parsed result
can be then accessed by the C<parsed_struct> method.  Any parse error
is reported through the C<onerror> handler.

=item $parsed = $parser->parsed_struct

If the previous invocation of the C<parse_char_string> method
succeeded, the parsed data structure of the input Web IDL fragment is
returned.  Otherwise, C<undef> is returned.

Please note that the parsed result might contain Web IDL conformance
error, e.g. its interface names can be duplicated, or a referenced
type might not be defined at all.

=back

=head1 DATA STRUCTURE

The parsed data structure is a hash reference, with a key/value pair:
C<definitions>.  Its value is an array reference containing
definitions.

A definition is a hash reference with following key/value pairs:

=over 4

=item index

The index in the input character string at which the first character
for the definition appears.

=item definition_name

Type of the definition: C<interface>, C<class>, C<exception>,
C<dictionary>, C<enum>, or C<callback>.

Note that the C<definition_name> for a C<callback interface> is
C<interface>.

=item partial

Whether the definition has the C<partial> keyword or not.

=item callback

Whether the definition is an interface and it has the C<callback>
keyword or not.  Note that for a non-interface callback, this value is
false.

=item name

The name of the defined construct.

=item super_name

The name of the member from which the member inherits, if any.

=item members

The array reference containing the members of the definition, if
applicable.

=item value_items

The array reference of the allowed string values associated with the
definition, if applicable.  Items are hash references with a key/value
pair whose key is C<type_string> and value is the string value.

=item arguments

The array reference of the arguments for the definition, if
applicable.

=item extended_attributes

The array reference of the extended attributes for the definition, if
any.

=back

In addition, the type key/value pairs whose target is the definition
are also available if applicable.

A member is a hash reference with following key/value pairs:

=over 4

=item index

The index in the input character string at which the first character
for the member appears.

=item member_type

The type of the member: C<attribute>, C<operation>, C<const>,
C<field>, or C<dictionary_member>.

=item name

The name of the member, if applicable.

=item readonly, inherit, static

=item creator, getter, setter, deleter, stringifier, serializer

=item required

Whether the keyword is set to the member or not.

=item value

The builtin value associated with the member, if applicable.  One of:
C<true>, C<false>, C<null>, C<Infinity>, C<-Infinity>, or C<NaN>.

=item value_float

The value associated with the member, as a float, if applicable.

=item value_integer

The value associated with the member, as a integer, if applicable.

=item value_string

The value associated with the member, as a string, if applicable.

=item value_name

The value associated with the member, as an identifier, if applicable.

=item value_empty_sequence

If specified, the value is an empty sequence.

=item value_map

The serialization pattern (map) of the member, if applicable.

=item value_list

The serialization pattern (list) of the member, if applicable.

=item arguments

The array reference of the arguments for the member, if applicable.

=item extended_attributes

The array reference of the extended attributes for the member, if any.

=back

In addition, the type key/value pairs whose target is the member are
also available if applicable.

An argument is a hash reference with following key/value pairs:

=over 4

=item index

The index in the input character string at which the first character
for the argument appears.

=item name

The name of the argument.

=item optional

Whether the argument is optional or not.

=item value

The builtin value associated with the argument, if any.  One of:
C<true>, C<false>, C<null>, C<Infinity>, C<-Infinity>, or C<NaN>.

=item value_float

The value associated with the argument, as a float, if any.

=item value_integer

The value associated with the argument, as an integer, if any.

=item value_string

The value associated with the argument, as a string, if any.

=item variadic

Whether there is the C<...> token or not.

=item extended_attributes

The array reference of the extended attributes for the argument, if
any.

=back

In addition, the type key/value pairs whose target is the argument are
also available if applicable.

A serialization pattern (either map or list) is a hash reference with
following key/value pairss:

=over 4

=item value_names

The array reference containing the values in the pattern.

=item inherit, attribute, getter

Whether the keyword is specified for the serialization pattern or not.

=back

An extended attribute is a hash reference with following key/value
pairs:

=over 4

=item index

The index in the input character string at which the first character
for the extended attribute appears.

=item name

The name of the extended attribute.

=item arguments

The array reference of the arguments for the extended attribute, if
any.

=item value_names

The array reference of the argument identifiers for the extended
attribute, if any.

=back

The type key/value pairs are as follows:

=over 4

=item type

The Web IDL builtin type associated with the target, such as C<long>,
C<any>, C<void>, C<unsigned long>, C<unrestricted double> (where
spaces are represented by a U+0020 character), if any.

=item type_name

The name of the Web IDL type associated with the target, if any.

=item type_nullable

Whether the Web IDL type associated with the target is nullable or
not.

=item type_array

A hash reference if the Web IDL type associated with the target is an
array whose item type is represented by the other type key/value
pairs.  The hash reference can contain the type key/value pairs, which
represents that the array type is in fact an inner type of another
type.

For example, a Web IDL type C< T[]?[] > is represented as:

  {
    "type_name": "T",
    "type_array": {
      "type_nullable": 1,
      "type_array": {}
    }
  }

=item type_parameterized

The hash reference representing the prameterized Web IDL type of the
target, if any.

=item type_outer

The type of the parameterized type, such as C<sequence> and
C<Promise>, if the hash reference containing the key/value pair
represents a parameterized Web IDL type of the target.

=back

Hash references might also contain key/value pairs C<id>, C<spec>, and
C<obsolete>, corresponding to non-standard directives C<[*id="..."*]>,
C<[*spec=...*]>, and C<[*obsolete*]>.  These directives are only used
for internal processing of <https://github.com/manakai/data-web-defs>
and are not (and should not) be used elsewhere.

=head1 SPECIFICATIONS

=over 4

=item WEBIDL

Web IDL <http://heycam.github.io/webidl/>.

Web IDL "class"
<https://www.w3.org/Bugs/Public/show_bug.cgi?id=23225>,
<http://dom.spec.whatwg.org/#elements>.

=back

This implementation also supports C<Promise> type (without following
C<< <T> >> part) for backward compatibility.  It is interpreted as C<<
Promise<any> >>.  This will be removed in due course.

This implementation also supports old syntax for extended attributes
which take an identifier list
<https://github.com/heycam/webidl/commit/0527ec461492849d310257c50a7d2c54b4632b91>,
for backward compatibility.  This will be removed in due course.

In this implementation, extended attributes MUST be in one of six
forms shown in the Web IDL specification.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2014 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
